import openai
import logging
from pyrogram import Client, filters

# тЬЕ Setup logging for debugging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ЁЯЪл SECURITY NOTE: Replace these with environment variables in production
API_ID = "16457832"  # Replace with your actual API ID
API_HASH = "3030874d0befdb5d05597deacc3e83ab"  # Replace with your actual API Hash
TELEGRAM_BOT_TOKEN = "7988392037:AAFaUjcdvALKnx4EE9YmsBhdCxOK_sbcZs8"  # Replace with your actual bot token
OPENAI_API_KEY = ""  # Replace with your actual OpenAI API key

# ЁЯФР OpenAI API key
openai.api_key = OPENAI_API_KEY

# ЁЯза ChatGPT Prompt for natural, human-like replies
SYSTEM_PROMPT = (
    "рддреБрдо рдПрдХ рдЗрдВрд╕рд╛рди рдЬреИрд╕реЗ рдмрд╛рдд рдХрд░рдиреЗ рд╡рд╛рд▓реЗ chatbot рд╣реЛред рдЬрд╡рд╛рдм рдмрд╣реБрдд рдЫреЛрдЯреЗ, рд╕реАрдзреЗ рдФрд░ casual рд╣реЛрдиреЗ рдЪрд╛рд╣рд┐рдП тАФ "
    "рдЬреИрд╕реЗ рдХреЛрдИ рджреЛрд╕реНрдд WhatsApp рдкрд░ рдмрд╛рдд рдХрд░ рд░рд╣рд╛ рд╣реЛред рд╣рд░ рд╕рд╡рд╛рд▓ рдХрд╛ рдЬрд╡рд╛рдм рдмрд╣реБрдд natural рдФрд░ friendly tone рдореЗрдВ рджреЛред "
    "рдХреЛрдИ рд▓рдВрдмрд╛ explanation рдирд╣реАрдВ рджреЗрдирд╛ рд╣реИред рдЬрд╡рд╛рдм рдореЗрдВ рдХрднреА-рдХрднреА emoji рднреА use рдХрд░ рд╕рдХрддреЗ рд╣реЛред"
)

# ЁЯЯв Start Command Handler
async def start(client, message):
    await message.reply_text("рд╣рд╛рдп! рдореИрдВ рдПрдХ рджреЛрд╕реНрддрд╛рдирд╛ рдЪреИрдЯрдмреЙрдЯ рд╣реВрдБ ЁЯШК рдореБрдЭрд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреЛред")

# ЁЯТм Message Handler for user messages
async def handle_message(client, message):
    user_msg = message.text

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",  # Updated to GPT-4
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_msg}
            ]
        )

        reply = response.choices[0].message["content"].strip()  # Correct response format
        await message.reply_text(reply)

    except Exception as e:
        logging.error(f"OpenAI Error: {e}")
        await message.reply_text("рд╕реЙрд░реА, рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реЛ рдЧрдИ ЁЯШЕ рдмрд╛рдж рдореЗрдВ рдЯреНрд░рд╛рдп рдХрд░реЗрдВред")

# ЁЯФБ Main bot runner
app = Client(
    "chatbot", 
    api_id=API_ID, 
    api_hash=API_HASH, 
    bot_token=TELEGRAM_BOT_TOKEN
)

# Add handlers using decorators
@app.on_message(filters.command("start"))
async def on_start(client, message):
    await start(client, message)

@app.on_message(filters.text & ~filters.command(""))
async def on_message(client, message):
    await handle_message(client, message)

# Start the bot
if __name__ == "__main__":
    print("ЁЯдЦ Bot is running...")
    app.run()
